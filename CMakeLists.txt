cmake_minimum_required(VERSION 3.15)

project(Cidr)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

if (WIN32)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++ -static")
	set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -static-libgcc -static-libstdc++ -static -mwindows")
endif()

if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	set(INCLUDE_DIR "${CMAKE_SOURCE_DIR}/include")
	file(GLOB SRC "${CMAKE_SOURCE_DIR}/demo.cpp" "${CMAKE_SOURCE_DIR}/src/*")
else()
	file(GLOB SRC "${CMAKE_SOURCE_DIR}/demo.cpp" "${CMAKE_SOURCE_DIR}/cidr.hpp")
endif()

if (WIN32)
	add_definitions(-DSDL_MAIN_HANDLED)
	find_package(SDL2 REQUIRED CONFIG)
else()
	set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "./cmake/")
	find_package(SDL2 REQUIRED)
	include_directories(${SDL2_INCLUDE_DIRS})
endif()

add_executable(${PROJECT_NAME} ${SRC})
if (CMAKE_BUILD_TYPE STREQUAL "Debug")
	target_include_directories(${PROJECT_NAME} PRIVATE ${INCLUDE_DIR})
	target_compile_options(${PROJECT_NAME} PRIVATE -Wall -Wextra -pedantic)
endif()
if (WIN32)
	target_link_libraries(${PROJECT_NAME} PRIVATE SDL2main SDL2 hid setupapi imagehlp dinput8 dxguid dxerr8 user32 gdi32 winmm imm32 ole32 oleaut32 shell32 version uuid)
else()
	target_link_libraries(${PROJECT_NAME} ${SDL2_LIBRARIES})
endif()
